WITH users (user_id, action, date) 
AS (VALUES 
(1,'start', CAST('01-01-20' AS date)), 
(1,'cancel', CAST('01-02-20' AS date)), 
(2,'start', CAST('01-03-20' AS date)), 
(2,'publish', CAST('01-04-20' AS date)), 
(3,'start', CAST('01-05-20' AS date)), 
(3,'cancel', CAST('01-06-20' AS date)), 
(1,'start', CAST('01-07-20' AS date)), 
(1,'publish', CAST('01-08-20' AS date))),

tbl1 as 
(select user_id, sum(case when action = 'start' then 1 else 0 end) as start_count,
			    sum(case when action = 'cancel' then 1 else 0 end) as cancel_count,
				sum(case when action = 'publish' then 1 else 0 end) as publish_count
from users
group by 1)

select user_id, round(1.0*publish_count/start_count,2) as publish_rate,
				round(1.0*cancel_count/start_count,2) as cancel_rate
from tbl1
order by user_id;


---------------------------------------------------------------------------------------------------


WITH transactions (sender, receiver, amount, transaction_date) 
AS (VALUES 
(5, 2, 10, CAST('12-2-20' AS date)),
(1, 3, 15, CAST('13-2-20' AS date)), 
(2, 1, 20, CAST('13-2-20' AS date)), 
(2, 3, 25, CAST('14-2-20' AS date)), 
(3, 1, 20, CAST('15-2-20' AS date)), 
(3, 2, 15, CAST('15-2-20' AS date)), 
(1, 4, 5, CAST('16-2-20' AS date))),

tbl1 as 
(select sender, sum(amount) sent
from transactions
group by 1), 

tbl2 as 
(select receiver, sum(amount) received
from transactions
group by 1)

select coalesce(a.sender, b.receiver),  coalesce(received,0) - coalesce(sent,0) as net_change
from tbl1 a
full outer join tbl2 b
on a.sender = b.receiver;


---------------------------------------------------------------------------------------------------


WITH users (user_id, product_id, transaction_date) 
AS (VALUES 
(1, 101, CAST('12-2-20' AS date)), 
(2, 105, CAST('13-2-20' AS date)), 
(1, 111, CAST('14-2-20' AS date)), 
(3, 121, CAST('15-2-20' AS date)), 
(1, 101, CAST('16-2-20' AS date)), 
(2, 105, CAST('17-2-20' AS date)),
(4, 101, CAST('16-2-20' AS date)), 
(3, 105, CAST('15-2-20' AS date))),

tbl1 as 
(select user_id, transaction_date, row_number() over(partition by user_id order by transaction_date ) row_num
from users order by 1),

tbl1_1 as
(select distinct user_id
from users),

tbl2 as 
(select a.user_id, b.transaction_date
from tbl1_1 a
left join (select * from tbl1 where row_num = 2) b
on a.user_id = b.user_id)

select * from tbl2 order by user_id;



---------------------------------------------------------------------------------------------------




WITH friends (user_id, friend) 
AS (VALUES 
(1, 2), (1, 3), (1, 4), (2, 1), (3, 1), (3, 4), (4, 1), (4, 3)),
likes (user_id, page_likes) 
AS (VALUES 
(1, 'A'), (1, 'B'), (1, 'C'), (2, 'A'), (3, 'B'), (3, 'C'), (4, 'B')),

tbl1 as 
(select distinct a.user_id, b.friend , a.page_likes
from likes a
left join friends b
on a.user_id = b.user_id
order by 1,3,2),

tbl2 as (
select a.*, b.page_likes as page_likes_friend
from tbl1 a
left join likes b
on a.friend = b.user_id),

tbl3 as
(select distinct user_id, page_likes_friend from tbl2
order by 1,2)


select * 
from tbl3 
except (select * from likes)
order by 1,2;


---------------------------------------------------------------------------------------------------


WITH mobile (user_id, page_url) 
AS (VALUES 
(1, 'A'), (2, 'B'), (3, 'C'), (4, 'A'), (9, 'B'), (2, 'C'), (10, 'B')),
web (user_id, page_url) 
AS (VALUES 
(6, 'A'), (2, 'B'), (3, 'C'), (7, 'A'), (4, 'B'), (8, 'C'), (5, 'B')),

tbl1 as
(select user_id, 'mobile' type
from mobile
union all
select user_id, 'web' type
from web),

tbl2 as
(select user_id, 
 case when sum(case when type = 'mobile' then 1 else 0 end) >1 then 1 else sum(case when type = 'mobile' then 1 else 0 end) end  as mobile,
 case when sum(case when type = 'web' then 1 else 0 end) >1 then 1 else sum(case when type = 'web' then 1 else 0 end) end  as web
from tbl1
group by 1),

tbl3 as
(select user_id,
	case when mobile + web = 2 then 'both'
		 when mobile = 1 then 'mobile'
		 when mobile = 0 then 'web' end as type
from tbl2)

select round(avg(case when type = 'mobile' then 1 else 0 end),1) mobile_fraction, 
	   round(avg(case when type = 'web' then 1 else 0 end),1) web_fraction,
	   round(avg(case when type = 'both' then 1 else 0 end),1) both_fraction
from tbl3;

---------------------------------------------------------------------------------------------------


WITH users (user_id, name, join_date) 
AS (VALUES 
(1, 'Jon', CAST('14-2-20' AS date)), 
(2, 'Jane', CAST('14-2-20' AS date)), 
(3, 'Jill', CAST('15-2-20' AS date)), 
(4, 'Josh', CAST('15-2-20' AS date)), 
(5, 'Jean', CAST('16-2-20' AS date)), 
(6, 'Justin', CAST('17-2-20' AS date)),
(7, 'Jeremy', CAST('18-2-20' AS date))),

events (user_id, type, access_date) 
AS (VALUES 
(1, 'F1', CAST('1-3-20' AS date)), 
(2, 'F2', CAST('2-3-20' AS date)), 
(2, 'P', CAST('12-3-20' AS date)),
(3, 'F2', CAST('15-3-20' AS date)), 
(4, 'F2', CAST('15-3-20' AS date)), 
(1, 'P', CAST('16-3-20' AS date)), 
(3, 'P', CAST('22-3-20' AS date))),

t1 AS (
SELECT user_id, type, access_date AS f2_date
FROM events
WHERE type = 'F2' ),
-- get premium users and their date of premium upgrade
t2 AS (
SELECT user_id, type, access_date AS premium_date
FROM events
WHERE type = 'P' ),
-- for each feature 2 user, get time between joining and premium upgrade (or null if no upgrade) by inner joining full users table with feature 2 users on user ID and left joining premium users on user ID, then subtracting premium upgrade date from join date
t3 AS (
SELECT t2.premium_date - u.join_date AS upgrade_time
FROM users u
JOIN t1
ON u.user_id = t1.user_id
LEFT JOIN t2
ON u.user_id = t2.user_id )
-- divide the number of users with upgrade time less than 30 days by the total number of feature 2 users, rounding to two decimals

 
SELECT round(1.0*sum(CASE WHEN upgrade_time < 30 THEN 1 ELSE 0 END)/count(*), 2) AS upgrade_rate
FROM t3 


---------------------------------------------------------------------------------------------------